设计模式：
    a、设计原则
       1.开闭原则。  对扩展开放，对修改关闭
       2.依赖倒置。 引用一个对象，如果这个对象有底层类型，直接引用底层类型-具体依赖于抽象，抽象不依赖具体
       3.迪米特原则。---最少知道原则。 一个对象对其他对象保持最少的了解
       4.单一职责原则。---不要存在多余一个导致类变更的原因
       5.接口隔离原则----每一个接口应该是一种角色，不要用一个总接口（应尽量细化接口，方法要少，适度）
       6.里氏替换原则 — 子类可以扩展父类，但不能修改父类原有的功能
       7.合成复用原则 — 多用组合，少用继承->使之成为新对象的一部分
分类：
    a.创建型模式
    创建型模式(Creational Pattern)对类的实例化过程进行了抽象，
    能够将软件模块中对象的创建和对象的使用分离。

    b.结构型模式
    结构型模式(Structural Pattern)描述如何将类或者对象结合在一起形成更大的结构，
    就像搭积木，可以通过 简单积木的组合形成复杂的、功能更为强大的结构。
    结构型模式可以分为类结构型模式和对象结构型模式：
    -类结构型模式关心类的组合，由多个类可以组合成一个更大的
    系统，在类结构型模式中一般只存在继承关系和实现关系。
    - 对象结构型模式关心类与对象的组合，通过关联关系使得在一个类中定义另一个类的实例对象，
    然后通过该对象调用其方法。 根据“合成复用原则”，在系统中尽量使用关联关系来替代继承关系，
    因此大部分结构型模式都是对象结构型模式。

    c.行为型模式(Behavioral Pattern)
    行为型模式不仅仅关注类和对象的结构，而且重点关注它们之间的相互作用。
    通过行为型模式，可以更加清晰地划分类与对象的职责，并研究系统在运行时实例对象之间的交互。
    在系统运行时，对象并不是孤立的，它们可以通过相互通信与协作完成某些复杂功能，
    一个对象在运行时也将影响到其他对象的运行。

    行为型模式分为类行为型模式和对象行为型模式两种：
    类行为型模式：类的行为型模式使用继承关系在几个类之间分配行为，
    类行为型模式主要通过多态等方式来分配父类与子类的职责。
    对象行为型模式：对象的行为型模式则使用对象的聚合关联关系来分配行为，
    对象行为型模式主要是通过对象关联等方式来分配两个或多个类的职责。
    根据“合成复用原则”，系统中要尽量使用关联关系来取代继承关系，
    因此大部分行为型设计模式都属于对象行为型设计模式。